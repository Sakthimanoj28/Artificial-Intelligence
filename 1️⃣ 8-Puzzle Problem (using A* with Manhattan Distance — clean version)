import heapq

goal = [[1,2,3],[4,5,6],[7,8,0]]
moves = [(-1,0),(1,0),(0,-1),(0,1)]

def manhattan(state):
    dist = 0
    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val != 0:
                x, y = (val-1)//3, (val-1)%3
                dist += abs(i-x) + abs(j-y)
    return dist

def get_pos(state):
    for i in range(3):
        for j in range(3):
            if state[i][j]==0:
                return i,j

def a_star(start):
    visited = set()
    heap = []
    heapq.heappush(heap, (manhattan(start), start, []))

    while heap:
        cost, state, path = heapq.heappop(heap)
        if state == goal:
            return path + [state]
        visited.add(str(state))
        x, y = get_pos(state)
        for dx, dy in moves:
            nx, ny = x+dx, y+dy
            if 0<=nx<3 and 0<=ny<3:
                new_state = [row[:] for row in state]
                new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
                if str(new_state) not in visited:
                    heapq.heappush(heap, (manhattan(new_state)+len(path)+1, new_state, path+[state]))
    return None

start_state = [[1,2,3],[4,0,6],[7,5,8]]
solution = a_star(start_state)
for s in solution:
    for row in s:
        print(row)
    print()
